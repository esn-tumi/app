### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ActivityLog {
  createdAt: DateTime!
  data: Json
  id: ID!
  involvedUser: String
  message: String!
  oldData: Json
  severity: LogSeverity!
}

type ActivityLogStat {
  count: Int!
  message: String!
}

input AddLineItemToBasketInput {
  price: Json!
  productId: String!
  quantity: Int = 1
  submissions: Json
}

type CostItem {
  actualAmount: Decimal
  amount: Decimal!
  calculationInfo: String!
  complete: Boolean!
  confirmed: Boolean!
  createdAt: DateTime!
  details: String
  event: TumiEvent!
  eventId: String!
  id: ID!
  name: String!
  onInvoice: Boolean!
  receipts: [Receipt!]!
  submittedAmount: Decimal!
  transactions: [Transaction!]!
}

"""Additional inputs to create an event from a template"""
input CreateEventFromTemplateInput {
  end: DateTime!
  organizerId: ID!
  organizerLimit: Int!
  participantLimit: Int!
  price: Decimal
  registrationLink: String
  registrationMode: RegistrationMode!
  start: DateTime!
}

"""Input needed to create a new event template"""
input CreateEventTemplateInput {
  comment: String!
  coordinates: Json
  description: String!
  duration: Decimal!
  icon: String!
  insuranceDescription: String!
  location: String!
  organizerText: String!
  participantText: String!
  shouldBeReportedToInsurance: Boolean!
  title: String!
}

input CreatePhotoShareInput {
  cols: Int!
  container: String!
  originalBlob: String!
  rows: Int!
  type: String!
}

input CreateProductImageInput {
  container: String!
  originalBlob: String!
  type: String!
}

input CreateReceiptInput {
  amount: Decimal!
  blob: String!
  container: String!
  md5: String
  type: String
}

input CreateSubmissionItemInput {
  data: Json
  instruction: String!
  name: String!
  required: Boolean!
  submissionTime: SubmissionTime!
  type: SubmissionItemType!
}

"""New user input object"""
input CreateUserInput {
  birthdate: DateTime
  enrolmentStatus: EnrollmentStatus!
  firstName: String!
  lastName: String!
  phone: String
  university: String
}

input DateRangeInput {
  end: DateTime!
  start: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum EnrollmentStatus {
  EXCHANGE
  INTERNATIONAL
  LOCAL
  NONE
  OTHER
}

type EventOrganizer {
  createdAt: DateTime!
  events: [TumiEvent!]!
  id: ID!
  link: String
  name: String!
  tenant: Tenant!
  tenantId: String!
  text: String!
}

type EventRegistration {
  belongsToCurrentUser: Boolean!
  cancellationReason: String
  checkInTime: DateTime
  createdAt: DateTime!
  creatingCode: EventRegistrationCode
  deletingCode: EventRegistrationCode
  didAttend: Boolean!
  event: TumiEvent!
  eventId: String!
  id: ID!
  manualCheckin: Boolean!
  rating: Int
  status: RegistrationStatus!
  submissions: [EventSubmission!]!
  transaction: Transaction
  transactionId: String
  type: RegistrationType!
  user: User!
  userComment: String
  userId: String!
}

type EventRegistrationCode {
  connectedRegistrations: [EventRegistration!]!
  createdAt: DateTime!
  createdById: String!
  creator: User!
  eventId: String!
  id: ID!
  isPublic: Boolean!
  registrationCreated: EventRegistration
  registrationCreatedId: String
  registrationToRemove: EventRegistration
  registrationToRemoveId: String
  sepaAllowed: Boolean!
  status: RegistrationStatus!
  targetEvent: TumiEvent!
  transaction: Transaction
  transactionId: String
}

type EventSubmission {
  createdAt: DateTime!
  data: Json!
  eventRegistrationId: String
  id: ID!
  registration: EventRegistration
  submissionItem: EventSubmissionItem!
  submissionItemId: String!
}

type EventSubmissionItem {
  createdAt: DateTime!
  data: Json
  event: TumiEvent
  eventId: String
  id: ID!
  instruction: String!
  name: String!
  ownSubmissions: [EventSubmission!]!
  required: Boolean!
  responses(onlyWithPurchase: Boolean = false): [Json!]!
  submissionTime: SubmissionTime!
  submissions: [EventSubmission!]!
  type: SubmissionItemType!
}

"""
Template that holds all information for an event that is needed to run it
"""
type EventTemplate {
  comment: String!
  coordinates: Json
  createdAt: DateTime!
  description: String!
  duration: Decimal!
  eventInstances: [TumiEvent!]!
  finances: Json!
  icon: String!
  id: ID!
  insuranceDescription: String!
  location: String!
  organizerText: String!
  participantText: String!
  shouldBeReportedToInsurance: Boolean!
  tenant: Tenant!
  title: String!
}

type EventTemplateCategory {
  createdAt: DateTime!
  icon: String!
  id: ID!
  name: String!
  templates: [EventTemplate!]!
}

type Invite {
  createdAt: DateTime!
  creator: User!
  creatorId: String!
  email: String!
  id: ID!
  redeemedAt: DateTime
  redeemedBy: User
  redeemerId: String
  status: MembershipStatus!
  tenant: Tenant!
  tenantId: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LineItem {
  cancellationReason: String
  cart: ShoppingCart
  cost: Decimal!
  createdAt: DateTime!
  id: ID!
  pickupTime: DateTime
  product: Product!
  productId: String!
  purchase: Purchase
  purchaseId: String
  quantity: Int!
  shoppingCartId: String
  submissions: [EventSubmission!]!
}

enum LogSeverity {
  DEBUG
  ERROR
  INFO
  SILLY
  WARNING
}

enum MembershipStatus {
  ALUMNI
  FULL
  NONE
  SPONSOR
  TRIAL
}

type Mutation {
  addLineItemToBasket(input: AddLineItemToBasketInput!): LineItem

  """Adds the user with the supplied id to the event"""
  addOrganizerToEvent(eventId: ID!, userId: ID!): TumiEvent
  addReceiptToCostItem(costItemId: ID!, receiptInput: CreateReceiptInput!): CostItem

  """Change the publication state of an event"""
  changeEventPublication(id: ID!, state: PublicationState!): TumiEvent
  checkInUser(id: ID!, manualCheckin: Boolean = false): EventRegistration

  """Creates a new event from a given Template"""
  createEventFromTemplate(createEventFromTemplateInput: CreateEventFromTemplateInput!, templateId: ID!): TumiEvent

  """Create a new event organizer"""
  createEventOrganizer(newOrganizerInput: NewOrganizerInput!): EventOrganizer
  createEventTemplate(eventTemplateInput: CreateEventTemplateInput!): EventTemplate
  createInvites(emails: [String!]!, status: MembershipStatus!): [Invite]
  createPhotoShare(data: CreatePhotoShareInput!, eventId: ID!): PhotoShare
  createProduct: Product!
  createProductImage(data: CreateProductImageInput!, productId: ID!): ProductImage
  createPurchaseFromCart: Purchase!
  createRegistrationCode(eventId: ID!, isPublic: Boolean = false, registrationId: ID, sepaAllowed: Boolean = false): EventRegistrationCode!
  createSubmissionItem(
    data: CreateSubmissionItemInput!

    """ID of the targeted event"""
    id: ID!
    target: String = "event"
  ): EventSubmissionItem!
  createSubmissionOnEvent(
    data: CreateSubmissionItemInput!

    """ID of the targeted event"""
    id: ID!
  ): TumiEvent!
  decreaseLineItemQuantity(id: ID!): LineItem
  deleteCostItem(id: ID!): TumiEvent!
  deleteEvent(id: ID!): TumiEvent
  deleteLineItem(id: ID!): LineItem
  deleteProductImage(id: ID!): ProductImage
  deleteReceipt(costItemId: ID!, receiptId: ID!): CostItem!
  deleteSubmissionItem(
    """ID of the item to delete"""
    id: ID!
  ): EventSubmissionItem!

  """Delete one template by id"""
  deleteTemplate(id: ID!): EventTemplate
  deregisterFromEvent(registrationId: ID!, withRefund: Boolean = true): TumiEvent
  increaseLineItemQuantity(id: ID!): LineItem
  rateEvent(comment: String = "", id: ID!, rating: Int!): TumiEvent
  registerForEvent(eventId: ID!, price: Json, registrationType: RegistrationType = PARTICIPANT, submissions: Json): TumiEvent!

  """Add a new user to the database or update existing"""
  registerUser(userInput: CreateUserInput!): User!
  removeSubmissionFromEvent(
    """ID of the item to delete"""
    id: ID!
  ): TumiEvent!
  updateAddress(address: Json!, id: ID!): Purchase!
  updateCostItemsFromTemplate(eventId: ID!): TumiEvent
  updateESNcard(esnCardOverride: Boolean!, id: ID!): User
  updateEventCoreInfo(data: UpdateCoreEventInput!, id: ID!): TumiEvent!
  updateEventGeneralInfo(data: UpdateGeneralEventInput!, id: ID!): TumiEvent!

  """Update an event location"""
  updateEventLocation(data: UpdateLocationInput!, id: ID!): TumiEvent

  """Update an event template"""
  updateEventTemplateConnection(id: ID!, templateId: ID!): TumiEvent
  updateLeadImage(id: ID!, leadImageId: ID!): Product!
  updateProduct(data: UpdateProductInput!, id: ID!): Product!
  updateProfile(input: UpdateProfileInput!): User
  updatePurchaseStatus(id: ID!, status: PurchaseStatus!): Purchase!

  """Update an event template"""
  updateTemplate(data: UpdateTemplateInput!, id: ID!): EventTemplate
  updateTemplateFinances(finances: Json!, id: ID!): EventTemplate!

  """Update an event template"""
  updateTemplateLocation(data: UpdateLocationInput!, id: ID!): EventTemplate
  updateTenant(data: updateTenantInput!, id: ID!): Tenant

  """Change the role of s user on the current tenant"""
  updateUserRole(role: Role!, userId: ID!): User!

  """Change the status of s user on the current tenant"""
  updateUserStatus(status: MembershipStatus!, userId: ID!): User!
  useInvite(
    """The ID of the invite"""
    id: ID!
  ): Invite!
  useRegistrationCode(id: ID!, price: Json): EventRegistrationCode!
  verifyDCC(certificate: String!): Json

  """
  Send a verification email to a user (to the current user if no id is provided)
  """
  verifyEmail(userId: ID): User!
}

"""Input to create a new Event Organizer"""
input NewOrganizerInput {
  link: String
  name: String!
  text: String!
}

type PhotoShare {
  cols: Int!
  container: String!
  createdAt: DateTime!
  creator: User!
  creatorId: String!
  event: TumiEvent!
  eventId: String!
  id: ID!
  original: String!
  originalBlob: String!
  previewBlob: String
  rows: Int!
  src: String!
  type: String!
}

type Product {
  availability: [MembershipStatus!]!
  createdAt: DateTime!
  defaultPrice: Decimal
  description: String!
  id: ID!
  images: [ProductImage!]!
  isActive: Boolean!
  isESNcard: Boolean!
  leadImage: ProductImage
  leadImageId: String
  lineItems(onlyWithPurchase: Boolean = false): [LineItem!]!
  needsShippingAddress: Boolean!
  orderQuantity: Int!
  prices: Json!
  publicationState: PublicationState!
  submissionItems: [EventSubmissionItem!]!
  submissionOverview: [Json!]
  tenant: Tenant!
  tenantId: String!
  title: String!
  uniSplit: [Json!]!
}

type ProductImage {
  container: String!
  createdAt: DateTime!
  creator: User!
  creatorId: String!
  id: ID!
  original: String!
  originalBlob: String!
  previewBlob: String
  product: Product!
  productId: String!
  src: String!
  type: String!
}

enum PublicationState {
  APPROVAL
  DRAFT
  ORGANIZERS
  PUBLIC
}

type Purchase {
  createdAt: DateTime!
  id: ID!
  items: [LineItem!]!
  status: PurchaseStatus!
  transaction: Transaction!
  transactionId: String!
  user: User!
  userId: String!
}

enum PurchaseStatus {
  CANCELLED
  PAID
  PENDING
  SENT
}

type Query {
  blobUploadKey: String!
  costItem(id: ID!): CostItem!
  costItemsForEvent(eventId: ID!): [CostItem!]!
  currentTenant: Tenant

  """Returns the logged in user if found or throws an error"""
  currentUser: User

  """Get one event by ID"""
  event(eventId: ID!): TumiEvent!
  eventRegistrationCode(id: ID!): EventRegistrationCode
  eventRegistrationCodes(includePassed: Boolean = false, includePrivate: Boolean = false, includeUsed: Boolean = false, orderByEvent: Boolean = false): [EventRegistrationCode!]!

  """Get one event template by ID"""
  eventTemplate(id: ID!): EventTemplate

  """Query event templates for the current tenant"""
  eventTemplates: [EventTemplate!]!

  """Get a list of all events"""
  events(after: DateTime, before: DateTime, limit: Int, userId: ID): [TumiEvent!]!
  getPaymentSetupSession: paymentSetupSession!
  invite(
    """The ID of the invite"""
    id: ID!
  ): Invite
  invites: [Invite!]!
  lmuPurchases: [Purchase!]!
  logStats: [ActivityLogStat!]!
  logs: [ActivityLog!]!

  """Retrieve a list of all event organizers"""
  organizers: [EventOrganizer!]!
  photoShareKey: String!
  photos: [PhotoShare!]!
  photosOfEvent(id: ID!): [PhotoShare!]!
  product(id: ID!): Product!
  productImageKey: String!
  products(onlyWithOrders: Boolean = false): [Product!]!
  purchase(id: ID!): Purchase!
  purchases(limitToOwn: Boolean = true): [Purchase!]!
  registration(id: ID!): EventRegistration!
  registrationCount(statusList: [RegistrationStatus!] = [PENDING, SUCCESSFUL]): Int!
  registrations(pageIndex: Int, pageLength: Int, statusList: [RegistrationStatus!] = [PENDING, SUCCESSFUL]): [EventRegistration!]!
  templateCategories: [EventTemplateCategory!]!
  templateCategory(id: ID!): EventTemplateCategory
  tenants: [Tenant!]!
  userById(
    """ID of the user"""
    id: ID!
  ): User
  userSearchResultNum(roleList: [Role] = [USER, ADMIN], search: String, statusList: [MembershipStatus] = [NONE, TRIAL, FULL, SPONSOR, ALUMNI]): Int!

  """Get all users with a status from the allowList"""
  userWithStatus(allowList: [MembershipStatus!]!): [User!]!

  """returns a list of users"""
  users(onlyWithPurchase: Boolean = false, pageIndex: Int, pageLength: Int, roleList: [Role] = [USER, ADMIN], search: String, statusList: [MembershipStatus] = [NONE, TRIAL, FULL, SPONSOR, ALUMNI]): [User!]!
}

type Receipt {
  amount: Decimal!
  blob: String!
  container: String!
  costItem: CostItem!
  costItemId: String!
  createdAt: DateTime!
  id: ID!
  md5: String
  originalUrl: String!
  preview: String
  type: String
  url: String!
  user: User!
  userId: String!
}

enum RegistrationMode {
  EXTERNAL
  ONLINE
  STRIPE
}

enum RegistrationStatus {
  CANCELLED
  PENDING
  SUCCESSFUL
}

enum RegistrationType {
  CALENDAR
  ORGANIZER
  PARTICIPANT
}

enum Role {
  ADMIN
  USER
}

type ShoppingCart {
  createdAt: DateTime!
  id: ID!
  items: [LineItem!]!
  userOfTenant: UsersOfTenants!
  usersOfTenantsTenantId: String!
  usersOfTenantsUserId: String!
}

type StripePayment {
  amount: Decimal!
  checkoutSession: String!
  createdAt: DateTime!

  """Array of events with their timestamps"""
  events: [Json]!
  feeAmount: Decimal
  id: ID!
  netAmount: Decimal
  netLessRefundAmount: Decimal!
  paymentIntent: String!
  paymentMethod: String
  paymentMethodType: String
  refundedAmount: Decimal
  shipping: Json
  status: String!
  transaction: Transaction!
  transactionId: String!
}

type StripeUserData {
  customerId: String!
  id: ID!
  paymentMethodId: String
}

enum SubmissionItemType {
  BOOLEAN
  CONFIRM
  DATE
  FILE
  LONGTEXT
  NUMBER
  RATING
  SELECT
  TEXT
}

enum SubmissionTime {
  AFTER
  BEFORE
  DURING
  REGISTRATION
}

"""One Tenant of the app, most likely an ESN section"""
type Tenant {
  aboutPage: String!
  createdAt: DateTime!
  faqPage: String
  id: ID!
  imprintPage: String!
  name: String!
  privacyPolicyPage: String!
  shortName: String!
  statistics: statistics!
  tacPage: String
  transactions: [Transaction!]!
}

type Transaction {
  amount: Decimal!
  comment: String
  costItem: CostItem
  costItemId: String
  createdAt: DateTime!
  createdBy: User!
  creatorId: String!
  eventRegistration: EventRegistration
  id: ID!
  isMembershipFee: Boolean!
  partner: String
  purchase: Purchase
  stripePayment: StripePayment
  subject: String!
  tenant: Tenant!
  tenantId: String!
  type: TransactionType!
  user: User
  userId: String
}

enum TransactionType {
  CASH
  PAYPAL
  STRIPE
  TRANSFER
}

"""Actual instande of an TumiEventbased on a template"""
type TumiEvent {
  activeRegistration: EventRegistration
  amountCollected: Decimal!
  coordinates: Json
  costItems(hideOnInvoice: Boolean = false): [CostItem!]!

  """Indicates whether the user could be an organizer for this event"""
  couldBeOrganizer: Boolean!

  """Indicates whether the user could be a participant for this event"""
  couldBeParticipant: Boolean!

  """
  Number of users registered as participant to this event, counted directly
  """
  countedParticipantRegistrations: Int!
  createdAt: DateTime!
  createdBy: User!
  creatorId: String!
  description: String!
  disableDeregistration: Boolean!
  end: DateTime!
  eventOrganizerId: String!
  eventRegistrationCodes: [EventRegistrationCode!]!
  eventTemplate: EventTemplate!
  eventTemplateId: String!
  feesPaid: Decimal!
  freeParticipantSpots: String!
  icon: String!
  id: ID!
  insuranceDescription: String!
  location: String!
  needsRating: Boolean!
  netAmountCollected: Decimal!
  organizer: EventOrganizer!
  organizerLimit: Int!
  organizerRatings: Float

  """
  Indicates whether the current user can register to this event as Organizer
  """
  organizerRegistrationPossible: Boolean!
  organizerRegistrations: [EventRegistration!]!
  organizerSignup: [MembershipStatus!]!
  organizerText: String!

  """Organizers already on this event"""
  organizers: [User!]!

  """Number of users registered as organizer to this event"""
  organizersRegistered: Int!
  ownRegistrations(includeCancelled: Boolean = false): [EventRegistration!]!
  participantLimit: Int!
  participantRatings: Float
  participantRegistrationCount: Int!

  """
  Indicates whether the current user can register to this event as participant
  """
  participantRegistrationPossible: Json!
  participantRegistrations(includeCancelled: Boolean = false): [EventRegistration!]!
  participantSignup: [MembershipStatus!]!
  participantText: String!

  """Number of users that are checked in on the event"""
  participantsAttended: Int!

  """Number of users registered as participant to this event"""
  participantsRegistered: Int! @deprecated(reason: "Use participantRegistrationCount instead")
  photoShares: [PhotoShare!]!
  plannedSpend: Decimal
  prices: Json
  publicationState: PublicationState!
  refundFeesPaid: Decimal!
  registrationLink: String
  registrationMode: RegistrationMode!
  registrationStart: DateTime!
  shouldBeReportedToInsurance: Boolean!
  start: DateTime!
  submissionItems(submissionTime: SubmissionTime): [EventSubmissionItem!]!
  submittedSpend: Decimal
  title: String!
  userIsCreator: Boolean!

  """Indicates if the current user is organizer for the event"""
  userIsOrganizer: Boolean!

  """Indicates if the current user is registered for the event"""
  userRegistered: Boolean!
}

"""Core information related to an event"""
input UpdateCoreEventInput {
  disableDeregistration: Boolean!
  end: DateTime!
  eventOrganizerId: String!
  icon: String!
  insuranceDescription: String!
  organizerLimit: Int!
  organizerSignup: [MembershipStatus!]!
  participantLimit: Int!
  participantSignup: [MembershipStatus!]!
  prices: Json
  registrationLink: String
  registrationMode: RegistrationMode!
  registrationStart: DateTime!
  shouldBeReportedToInsurance: Boolean!
  start: DateTime!
  title: String!
}

"""Texts related to an event"""
input UpdateGeneralEventInput {
  description: String!
  organizerText: String!
  participantText: String!
}

"""Input to update an event location"""
input UpdateLocationInput {
  coordinates: Json
  location: String!
}

input UpdateProductInput {
  availability: [MembershipStatus!]!
  description: String!
  isActive: Boolean!
  needsShippingAddress: Boolean!
  prices: Json!
  publicationState: PublicationState!
  title: String!
}

"""Profile update input object"""
input UpdateProfileInput {
  enrolmentStatus: EnrollmentStatus!
  firstName: String!
  lastName: String!
  phone: String
  university: String
}

"""Input to update an event template"""
input UpdateTemplateInput {
  comment: String!
  description: String!
  duration: Decimal!
  icon: String!
  insuranceDescription: String!
  organizerText: String!
  participantText: String!
  shouldBeReportedToInsurance: Boolean!
  title: String!
}

"""One User of the app"""
type User {
  """Id from auth0 for this user"""
  authId: String!
  birthdate: DateTime
  calendarToken: String!
  createdAt: DateTime!
  createdTransactions: [Transaction!]!
  currentTenant(userId: ID): UsersOfTenants!
  email: String!
  email_verified: Boolean!
  enrolmentStatus: EnrollmentStatus!
  esnCardOverride: Boolean!
  eventRegistrations: [EventRegistration!]!
  firstName: String!

  """Concatenated name of the user"""
  fullName: String!
  hasESNcard: Boolean!
  iban: String
  id: ID!
  lastName: String!

  """List of events organized by the user"""
  organizedEvents(hideCancelled: Boolean = false): [TumiEvent!]!
  outstandingRating: Boolean!

  """List of events attended by the user"""
  participatedEvents(hideCancelled: Boolean = false): [TumiEvent!]!
  paypal: String
  phone: String
  picture: String!
  profileComplete: Boolean!
  purchases(skipCancelled: Boolean = false): [Purchase!]!
  transactions: [Transaction!]!
  university: String
}

type UsersOfTenants {
  cart: ShoppingCart
  createdAt: DateTime!
  role: Role!
  status: MembershipStatus!
  stripeData: StripeUserData
  tenant: Tenant!
  tenantId: String!
  user: User!
  userId: String!
}

type checkoutSession {
  client_secret: String
  id: String!
  status: String!
}

type lineChartSeriesItem {
  name: String!
  value: Int!
}

type paymentIntent {
  client_secret: String
  id: String!
  status: String!
}

type paymentSetupSession {
  id: String!
}

type statistics {
  checkinHistory(range: DateRangeInput): [Json!]!
  checkins(range: DateRangeInput): Int!
  paidEvents(range: DateRangeInput): Int!
  paidRegistrations(range: DateRangeInput): Int!
  refundHistory(range: DateRangeInput): [Json!]!
  registrationHistory(range: DateRangeInput): [Json!]!
  registrations(range: DateRangeInput): Int!
  totalEvents(range: DateRangeInput): Int!
  userEventDistribution(range: DateRangeInput): [Json!]!
  userHistory(range: DateRangeInput): [Json!]!
  userStatusDistribution(range: DateRangeInput): [Json!]!
  userUniversityDistribution(range: DateRangeInput): [Json!]!
  usersRegistered(range: DateRangeInput): Int!
  usersRegisteredEvents(range: DateRangeInput): Int!
  usersRegisteredFreeEvents(range: DateRangeInput): Int!
  usersRegisteredPaidEvents(range: DateRangeInput): Int!
  usersWithCustomer(range: DateRangeInput): Int!
  usersWithPaymentMethod(range: DateRangeInput): Int!
}

input updateTenantInput {
  aboutPage: String!
  faqPage: String
  imprintPage: String!
  privacyPolicyPage: String!
  tacPage: String
}

type userHistoryItem {
  name: String!
  series: [lineChartSeriesItem!]!
}