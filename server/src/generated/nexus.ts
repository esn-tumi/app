/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddLineItemToBasketInput: { // input type
    price: NexusGenScalars['Json']; // Json!
    productId: string; // String!
    quantity: number | null; // Int
    submissions?: NexusGenScalars['Json'] | null; // Json
  }
  CreateEventFromTemplateInput: { // input type
    end: NexusGenScalars['DateTime']; // DateTime!
    organizerId: string; // ID!
    organizerLimit: number; // Int!
    participantLimit: number; // Int!
    price?: NexusGenScalars['Decimal'] | null; // Decimal
    registrationLink?: string | null; // String
    registrationMode: NexusGenEnums['RegistrationMode']; // RegistrationMode!
    start: NexusGenScalars['DateTime']; // DateTime!
  }
  CreateEventTemplateInput: { // input type
    comment: string; // String!
    coordinates?: NexusGenScalars['Json'] | null; // Json
    description: string; // String!
    duration: NexusGenScalars['Decimal']; // Decimal!
    icon: string; // String!
    insuranceDescription: string; // String!
    location: string; // String!
    organizerText: string; // String!
    participantText: string; // String!
    shouldBeReportedToInsurance: boolean; // Boolean!
    title: string; // String!
  }
  CreatePhotoShareInput: { // input type
    cols: number; // Int!
    container: string; // String!
    originalBlob: string; // String!
    rows: number; // Int!
    type: string; // String!
  }
  CreateProductImageInput: { // input type
    container: string; // String!
    originalBlob: string; // String!
    type: string; // String!
  }
  CreateReceiptInput: { // input type
    amount: NexusGenScalars['Decimal']; // Decimal!
    blob: string; // String!
    container: string; // String!
    md5?: string | null; // String
    type?: string | null; // String
  }
  CreateSubmissionItemInput: { // input type
    data?: NexusGenScalars['Json'] | null; // Json
    instruction: string; // String!
    name: string; // String!
    required: boolean; // Boolean!
    submissionTime: NexusGenEnums['SubmissionTime']; // SubmissionTime!
    type: NexusGenEnums['SubmissionItemType']; // SubmissionItemType!
  }
  CreateUserInput: { // input type
    birthdate?: NexusGenScalars['DateTime'] | null; // DateTime
    enrolmentStatus: NexusGenEnums['EnrollmentStatus']; // EnrollmentStatus!
    firstName: string; // String!
    lastName: string; // String!
    phone?: string | null; // String
    university?: string | null; // String
  }
  DateRangeInput: { // input type
    end: NexusGenScalars['DateTime']; // DateTime!
    start: NexusGenScalars['DateTime']; // DateTime!
  }
  NewOrganizerInput: { // input type
    link?: string | null; // String
    name: string; // String!
    text: string; // String!
  }
  UpdateCoreEventInput: { // input type
    disableDeregistration: boolean; // Boolean!
    end: NexusGenScalars['DateTime']; // DateTime!
    eventOrganizerId: string; // String!
    icon: string; // String!
    insuranceDescription: string; // String!
    organizerLimit: number; // Int!
    organizerSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    participantLimit: number; // Int!
    participantSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    prices?: NexusGenScalars['Json'] | null; // Json
    registrationLink?: string | null; // String
    registrationMode: NexusGenEnums['RegistrationMode']; // RegistrationMode!
    registrationStart: NexusGenScalars['DateTime']; // DateTime!
    shouldBeReportedToInsurance: boolean; // Boolean!
    start: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
  }
  UpdateGeneralEventInput: { // input type
    description: string; // String!
    organizerText: string; // String!
    participantText: string; // String!
  }
  UpdateLocationInput: { // input type
    coordinates?: NexusGenScalars['Json'] | null; // Json
    location: string; // String!
  }
  UpdateProductInput: { // input type
    availability: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    description: string; // String!
    isActive: boolean; // Boolean!
    needsShippingAddress: boolean; // Boolean!
    prices: NexusGenScalars['Json']; // Json!
    publicationState: NexusGenEnums['PublicationState']; // PublicationState!
    title: string; // String!
  }
  UpdateProfileInput: { // input type
    enrolmentStatus: NexusGenEnums['EnrollmentStatus']; // EnrollmentStatus!
    firstName: string; // String!
    lastName: string; // String!
    phone?: string | null; // String
    university?: string | null; // String
  }
  UpdateTemplateInput: { // input type
    comment: string; // String!
    description: string; // String!
    duration: NexusGenScalars['Decimal']; // Decimal!
    icon: string; // String!
    insuranceDescription: string; // String!
    organizerText: string; // String!
    participantText: string; // String!
    shouldBeReportedToInsurance: boolean; // Boolean!
    title: string; // String!
  }
  updateTenantInput: { // input type
    aboutPage: string; // String!
    faqPage?: string | null; // String
    imprintPage: string; // String!
    privacyPolicyPage: string; // String!
    tacPage?: string | null; // String
  }
}

export interface NexusGenEnums {
  EnrollmentStatus: "EXCHANGE" | "INTERNATIONAL" | "LOCAL" | "NONE" | "OTHER"
  LogSeverity: "DEBUG" | "ERROR" | "INFO" | "SILLY" | "WARNING"
  MembershipStatus: "ALUMNI" | "FULL" | "NONE" | "SPONSOR" | "TRIAL"
  PublicationState: "APPROVAL" | "DRAFT" | "ORGANIZERS" | "PUBLIC"
  PurchaseStatus: "CANCELLED" | "PAID" | "PENDING" | "SENT"
  RegistrationMode: "EXTERNAL" | "ONLINE" | "STRIPE"
  RegistrationStatus: "CANCELLED" | "PENDING" | "SUCCESSFUL"
  RegistrationType: "CALENDAR" | "ORGANIZER" | "PARTICIPANT"
  Role: "ADMIN" | "USER"
  SubmissionItemType: "BOOLEAN" | "CONFIRM" | "DATE" | "FILE" | "LONGTEXT" | "NUMBER" | "RATING" | "SELECT" | "TEXT"
  SubmissionTime: "AFTER" | "BEFORE" | "DURING" | "REGISTRATION"
  TransactionType: "CASH" | "PAYPAL" | "STRIPE" | "TRANSFER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  ActivityLog: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data?: NexusGenScalars['Json'] | null; // Json
    id: string; // ID!
    involvedUser?: string | null; // String
    message: string; // String!
    oldData?: NexusGenScalars['Json'] | null; // Json
    severity: NexusGenEnums['LogSeverity']; // LogSeverity!
  }
  ActivityLogStat: { // root type
    count: number; // Int!
    message: string; // String!
  }
  CostItem: { // root type
    actualAmount?: NexusGenScalars['Decimal'] | null; // Decimal
    amount: NexusGenScalars['Decimal']; // Decimal!
    calculationInfo: string; // String!
    complete: boolean; // Boolean!
    confirmed: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    details?: string | null; // String
    eventId: string; // String!
    id: string; // ID!
    name: string; // String!
    onInvoice: boolean; // Boolean!
  }
  EventOrganizer: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    link?: string | null; // String
    name: string; // String!
    tenantId: string; // String!
    text: string; // String!
  }
  EventRegistration: { // root type
    cancellationReason?: string | null; // String
    checkInTime?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    eventId: string; // String!
    id: string; // ID!
    manualCheckin: boolean; // Boolean!
    rating?: number | null; // Int
    status: NexusGenEnums['RegistrationStatus']; // RegistrationStatus!
    transactionId?: string | null; // String
    type: NexusGenEnums['RegistrationType']; // RegistrationType!
    userComment?: string | null; // String
    userId: string; // String!
  }
  EventRegistrationCode: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdById: string; // String!
    eventId: string; // String!
    id: string; // ID!
    isPublic: boolean; // Boolean!
    registrationCreatedId?: string | null; // String
    registrationToRemoveId?: string | null; // String
    sepaAllowed: boolean; // Boolean!
    status: NexusGenEnums['RegistrationStatus']; // RegistrationStatus!
    transactionId?: string | null; // String
  }
  EventSubmission: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data: NexusGenScalars['Json']; // Json!
    eventRegistrationId?: string | null; // String
    id: string; // ID!
    submissionItemId: string; // String!
  }
  EventSubmissionItem: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data?: NexusGenScalars['Json'] | null; // Json
    eventId?: string | null; // String
    id: string; // ID!
    instruction: string; // String!
    name: string; // String!
    required: boolean; // Boolean!
    submissionTime: NexusGenEnums['SubmissionTime']; // SubmissionTime!
    type: NexusGenEnums['SubmissionItemType']; // SubmissionItemType!
  }
  EventTemplate: { // root type
    comment: string; // String!
    coordinates?: NexusGenScalars['Json'] | null; // Json
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    duration: NexusGenScalars['Decimal']; // Decimal!
    finances: NexusGenScalars['Json']; // Json!
    icon: string; // String!
    id: string; // ID!
    insuranceDescription: string; // String!
    location: string; // String!
    organizerText: string; // String!
    participantText: string; // String!
    shouldBeReportedToInsurance: boolean; // Boolean!
    title: string; // String!
  }
  EventTemplateCategory: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    icon: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Invite: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorId: string; // String!
    email: string; // String!
    id: string; // ID!
    redeemedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    redeemerId?: string | null; // String
    status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
    tenantId: string; // String!
  }
  LineItem: { // root type
    cancellationReason?: string | null; // String
    cost: NexusGenScalars['Decimal']; // Decimal!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    pickupTime?: NexusGenScalars['DateTime'] | null; // DateTime
    productId: string; // String!
    purchaseId?: string | null; // String
    quantity: number; // Int!
    shoppingCartId?: string | null; // String
  }
  Mutation: {};
  PhotoShare: { // root type
    cols: number; // Int!
    container: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorId: string; // String!
    eventId: string; // String!
    id: string; // ID!
    originalBlob: string; // String!
    previewBlob?: string | null; // String
    rows: number; // Int!
    type: string; // String!
  }
  Product: { // root type
    availability: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    isESNcard: boolean; // Boolean!
    leadImageId?: string | null; // String
    needsShippingAddress: boolean; // Boolean!
    prices: NexusGenScalars['Json']; // Json!
    publicationState: NexusGenEnums['PublicationState']; // PublicationState!
    tenantId: string; // String!
    title: string; // String!
  }
  ProductImage: { // root type
    container: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorId: string; // String!
    id: string; // ID!
    originalBlob: string; // String!
    previewBlob?: string | null; // String
    productId: string; // String!
    type: string; // String!
  }
  Purchase: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    status: NexusGenEnums['PurchaseStatus']; // PurchaseStatus!
    transactionId: string; // String!
    userId: string; // String!
  }
  Query: {};
  Receipt: { // root type
    amount: NexusGenScalars['Decimal']; // Decimal!
    blob: string; // String!
    container: string; // String!
    costItemId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    md5?: string | null; // String
    preview?: string | null; // String
    type?: string | null; // String
    userId: string; // String!
  }
  ShoppingCart: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    usersOfTenantsTenantId: string; // String!
    usersOfTenantsUserId: string; // String!
  }
  StripePayment: { // root type
    amount: NexusGenScalars['Decimal']; // Decimal!
    checkoutSession: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    feeAmount?: NexusGenScalars['Decimal'] | null; // Decimal
    id: string; // ID!
    netAmount?: NexusGenScalars['Decimal'] | null; // Decimal
    paymentIntent: string; // String!
    paymentMethod?: string | null; // String
    paymentMethodType?: string | null; // String
    refundedAmount?: NexusGenScalars['Decimal'] | null; // Decimal
    shipping?: NexusGenScalars['Json'] | null; // Json
    status: string; // String!
    transactionId: string; // String!
  }
  StripeUserData: { // root type
    customerId: string; // String!
    id: string; // ID!
    paymentMethodId?: string | null; // String
  }
  Tenant: { // root type
    aboutPage: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    faqPage?: string | null; // String
    id: string; // ID!
    imprintPage: string; // String!
    name: string; // String!
    privacyPolicyPage: string; // String!
    shortName: string; // String!
    tacPage?: string | null; // String
  }
  Transaction: { // root type
    amount: NexusGenScalars['Decimal']; // Decimal!
    comment?: string | null; // String
    costItemId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorId: string; // String!
    id: string; // ID!
    isMembershipFee: boolean; // Boolean!
    partner?: string | null; // String
    subject: string; // String!
    tenantId: string; // String!
    type: NexusGenEnums['TransactionType']; // TransactionType!
    userId?: string | null; // String
  }
  TumiEvent: { // root type
    coordinates?: NexusGenScalars['Json'] | null; // Json
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorId: string; // String!
    description: string; // String!
    disableDeregistration: boolean; // Boolean!
    end: NexusGenScalars['DateTime']; // DateTime!
    eventOrganizerId: string; // String!
    eventTemplateId: string; // String!
    icon: string; // String!
    id: string; // ID!
    insuranceDescription: string; // String!
    location: string; // String!
    organizerLimit: number; // Int!
    organizerSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    organizerText: string; // String!
    participantLimit: number; // Int!
    participantRegistrationCount: number; // Int!
    participantSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    participantText: string; // String!
    prices?: NexusGenScalars['Json'] | null; // Json
    publicationState: NexusGenEnums['PublicationState']; // PublicationState!
    registrationLink?: string | null; // String
    registrationMode: NexusGenEnums['RegistrationMode']; // RegistrationMode!
    registrationStart: NexusGenScalars['DateTime']; // DateTime!
    shouldBeReportedToInsurance: boolean; // Boolean!
    start: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
  }
  User: { // root type
    authId: string; // String!
    birthdate?: NexusGenScalars['DateTime'] | null; // DateTime
    calendarToken: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    email_verified: boolean; // Boolean!
    enrolmentStatus: NexusGenEnums['EnrollmentStatus']; // EnrollmentStatus!
    esnCardOverride: boolean; // Boolean!
    firstName: string; // String!
    iban?: string | null; // String
    id: string; // ID!
    lastName: string; // String!
    paypal?: string | null; // String
    phone?: string | null; // String
    picture: string; // String!
    university?: string | null; // String
  }
  UsersOfTenants: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    role: NexusGenEnums['Role']; // Role!
    status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
    tenantId: string; // String!
    userId: string; // String!
  }
  checkoutSession: { // root type
    client_secret?: string | null; // String
    id: string; // String!
    status: string; // String!
  }
  lineChartSeriesItem: { // root type
    name: string; // String!
    value: number; // Int!
  }
  paymentIntent: { // root type
    client_secret?: string | null; // String
    id: string; // String!
    status: string; // String!
  }
  paymentSetupSession: { // root type
    id: string; // String!
  }
  statistics: {};
  userHistoryItem: { // root type
    name: string; // String!
    series: NexusGenRootTypes['lineChartSeriesItem'][]; // [lineChartSeriesItem!]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  ActivityLog: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data: NexusGenScalars['Json'] | null; // Json
    id: string; // ID!
    involvedUser: string | null; // String
    message: string; // String!
    oldData: NexusGenScalars['Json'] | null; // Json
    severity: NexusGenEnums['LogSeverity']; // LogSeverity!
  }
  ActivityLogStat: { // field return type
    count: number; // Int!
    message: string; // String!
  }
  CostItem: { // field return type
    actualAmount: NexusGenScalars['Decimal'] | null; // Decimal
    amount: NexusGenScalars['Decimal']; // Decimal!
    calculationInfo: string; // String!
    complete: boolean; // Boolean!
    confirmed: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    details: string | null; // String
    event: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    eventId: string; // String!
    id: string; // ID!
    name: string; // String!
    onInvoice: boolean; // Boolean!
    receipts: NexusGenRootTypes['Receipt'][]; // [Receipt!]!
    submittedAmount: NexusGenScalars['Decimal']; // Decimal!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  EventOrganizer: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    events: NexusGenRootTypes['TumiEvent'][]; // [TumiEvent!]!
    id: string; // ID!
    link: string | null; // String
    name: string; // String!
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    tenantId: string; // String!
    text: string; // String!
  }
  EventRegistration: { // field return type
    belongsToCurrentUser: boolean; // Boolean!
    cancellationReason: string | null; // String
    checkInTime: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatingCode: NexusGenRootTypes['EventRegistrationCode'] | null; // EventRegistrationCode
    deletingCode: NexusGenRootTypes['EventRegistrationCode'] | null; // EventRegistrationCode
    didAttend: boolean; // Boolean!
    event: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    eventId: string; // String!
    id: string; // ID!
    manualCheckin: boolean; // Boolean!
    rating: number | null; // Int
    status: NexusGenEnums['RegistrationStatus']; // RegistrationStatus!
    submissions: NexusGenRootTypes['EventSubmission'][]; // [EventSubmission!]!
    transaction: NexusGenRootTypes['Transaction'] | null; // Transaction
    transactionId: string | null; // String
    type: NexusGenEnums['RegistrationType']; // RegistrationType!
    user: NexusGenRootTypes['User']; // User!
    userComment: string | null; // String
    userId: string; // String!
  }
  EventRegistrationCode: { // field return type
    connectedRegistrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdById: string; // String!
    creator: NexusGenRootTypes['User']; // User!
    eventId: string; // String!
    id: string; // ID!
    isPublic: boolean; // Boolean!
    registrationCreated: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    registrationCreatedId: string | null; // String
    registrationToRemove: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    registrationToRemoveId: string | null; // String
    sepaAllowed: boolean; // Boolean!
    status: NexusGenEnums['RegistrationStatus']; // RegistrationStatus!
    targetEvent: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    transaction: NexusGenRootTypes['Transaction'] | null; // Transaction
    transactionId: string | null; // String
  }
  EventSubmission: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data: NexusGenScalars['Json']; // Json!
    eventRegistrationId: string | null; // String
    id: string; // ID!
    registration: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    submissionItem: NexusGenRootTypes['EventSubmissionItem']; // EventSubmissionItem!
    submissionItemId: string; // String!
  }
  EventSubmissionItem: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    data: NexusGenScalars['Json'] | null; // Json
    event: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    eventId: string | null; // String
    id: string; // ID!
    instruction: string; // String!
    name: string; // String!
    ownSubmissions: NexusGenRootTypes['EventSubmission'][]; // [EventSubmission!]!
    required: boolean; // Boolean!
    responses: NexusGenScalars['Json'][]; // [Json!]!
    submissionTime: NexusGenEnums['SubmissionTime']; // SubmissionTime!
    submissions: NexusGenRootTypes['EventSubmission'][]; // [EventSubmission!]!
    type: NexusGenEnums['SubmissionItemType']; // SubmissionItemType!
  }
  EventTemplate: { // field return type
    comment: string; // String!
    coordinates: NexusGenScalars['Json'] | null; // Json
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    duration: NexusGenScalars['Decimal']; // Decimal!
    eventInstances: NexusGenRootTypes['TumiEvent'][]; // [TumiEvent!]!
    finances: NexusGenScalars['Json']; // Json!
    icon: string; // String!
    id: string; // ID!
    insuranceDescription: string; // String!
    location: string; // String!
    organizerText: string; // String!
    participantText: string; // String!
    shouldBeReportedToInsurance: boolean; // Boolean!
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    title: string; // String!
  }
  EventTemplateCategory: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    icon: string; // String!
    id: string; // ID!
    name: string; // String!
    templates: NexusGenRootTypes['EventTemplate'][]; // [EventTemplate!]!
  }
  Invite: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    email: string; // String!
    id: string; // ID!
    redeemedAt: NexusGenScalars['DateTime'] | null; // DateTime
    redeemedBy: NexusGenRootTypes['User'] | null; // User
    redeemerId: string | null; // String
    status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    tenantId: string; // String!
  }
  LineItem: { // field return type
    cancellationReason: string | null; // String
    cart: NexusGenRootTypes['ShoppingCart'] | null; // ShoppingCart
    cost: NexusGenScalars['Decimal']; // Decimal!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    pickupTime: NexusGenScalars['DateTime'] | null; // DateTime
    product: NexusGenRootTypes['Product']; // Product!
    productId: string; // String!
    purchase: NexusGenRootTypes['Purchase'] | null; // Purchase
    purchaseId: string | null; // String
    quantity: number; // Int!
    shoppingCartId: string | null; // String
    submissions: NexusGenRootTypes['EventSubmission'][]; // [EventSubmission!]!
  }
  Mutation: { // field return type
    addLineItemToBasket: NexusGenRootTypes['LineItem'] | null; // LineItem
    addOrganizerToEvent: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    addReceiptToCostItem: NexusGenRootTypes['CostItem'] | null; // CostItem
    changeEventPublication: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    checkInUser: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    createEventFromTemplate: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    createEventOrganizer: NexusGenRootTypes['EventOrganizer'] | null; // EventOrganizer
    createEventTemplate: NexusGenRootTypes['EventTemplate'] | null; // EventTemplate
    createInvites: Array<NexusGenRootTypes['Invite'] | null> | null; // [Invite]
    createPhotoShare: NexusGenRootTypes['PhotoShare'] | null; // PhotoShare
    createProduct: NexusGenRootTypes['Product']; // Product!
    createProductImage: NexusGenRootTypes['ProductImage'] | null; // ProductImage
    createPurchaseFromCart: NexusGenRootTypes['Purchase']; // Purchase!
    createRegistrationCode: NexusGenRootTypes['EventRegistrationCode']; // EventRegistrationCode!
    createSubmissionItem: NexusGenRootTypes['EventSubmissionItem']; // EventSubmissionItem!
    createSubmissionOnEvent: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    decreaseLineItemQuantity: NexusGenRootTypes['LineItem'] | null; // LineItem
    deleteCostItem: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    deleteEvent: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    deleteLineItem: NexusGenRootTypes['LineItem'] | null; // LineItem
    deleteProductImage: NexusGenRootTypes['ProductImage'] | null; // ProductImage
    deleteReceipt: NexusGenRootTypes['CostItem']; // CostItem!
    deleteSubmissionItem: NexusGenRootTypes['EventSubmissionItem']; // EventSubmissionItem!
    deleteTemplate: NexusGenRootTypes['EventTemplate'] | null; // EventTemplate
    deregisterFromEvent: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    increaseLineItemQuantity: NexusGenRootTypes['LineItem'] | null; // LineItem
    rateEvent: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    registerForEvent: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    registerUser: NexusGenRootTypes['User']; // User!
    removeSubmissionFromEvent: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    updateAddress: NexusGenRootTypes['Purchase']; // Purchase!
    updateCostItemsFromTemplate: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    updateESNcard: NexusGenRootTypes['User'] | null; // User
    updateEventCoreInfo: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    updateEventGeneralInfo: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    updateEventLocation: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    updateEventTemplateConnection: NexusGenRootTypes['TumiEvent'] | null; // TumiEvent
    updateLeadImage: NexusGenRootTypes['Product']; // Product!
    updateProduct: NexusGenRootTypes['Product']; // Product!
    updateProfile: NexusGenRootTypes['User'] | null; // User
    updatePurchaseStatus: NexusGenRootTypes['Purchase']; // Purchase!
    updateTemplate: NexusGenRootTypes['EventTemplate'] | null; // EventTemplate
    updateTemplateFinances: NexusGenRootTypes['EventTemplate']; // EventTemplate!
    updateTemplateLocation: NexusGenRootTypes['EventTemplate'] | null; // EventTemplate
    updateTenant: NexusGenRootTypes['Tenant'] | null; // Tenant
    updateUserRole: NexusGenRootTypes['User']; // User!
    updateUserStatus: NexusGenRootTypes['User']; // User!
    useInvite: NexusGenRootTypes['Invite']; // Invite!
    useRegistrationCode: NexusGenRootTypes['EventRegistrationCode']; // EventRegistrationCode!
    verifyDCC: NexusGenScalars['Json'] | null; // Json
    verifyEmail: NexusGenRootTypes['User']; // User!
  }
  PhotoShare: { // field return type
    cols: number; // Int!
    container: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    event: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    eventId: string; // String!
    id: string; // ID!
    original: string; // String!
    originalBlob: string; // String!
    previewBlob: string | null; // String
    rows: number; // Int!
    src: string; // String!
    type: string; // String!
  }
  Product: { // field return type
    availability: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    defaultPrice: NexusGenScalars['Decimal'] | null; // Decimal
    description: string; // String!
    id: string; // ID!
    images: NexusGenRootTypes['ProductImage'][]; // [ProductImage!]!
    isActive: boolean; // Boolean!
    isESNcard: boolean; // Boolean!
    leadImage: NexusGenRootTypes['ProductImage'] | null; // ProductImage
    leadImageId: string | null; // String
    lineItems: NexusGenRootTypes['LineItem'][]; // [LineItem!]!
    needsShippingAddress: boolean; // Boolean!
    orderQuantity: number; // Int!
    prices: NexusGenScalars['Json']; // Json!
    publicationState: NexusGenEnums['PublicationState']; // PublicationState!
    submissionItems: NexusGenRootTypes['EventSubmissionItem'][]; // [EventSubmissionItem!]!
    submissionOverview: NexusGenScalars['Json'][] | null; // [Json!]
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    tenantId: string; // String!
    title: string; // String!
    uniSplit: NexusGenScalars['Json'][]; // [Json!]!
  }
  ProductImage: { // field return type
    container: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    id: string; // ID!
    original: string; // String!
    originalBlob: string; // String!
    previewBlob: string | null; // String
    product: NexusGenRootTypes['Product']; // Product!
    productId: string; // String!
    src: string; // String!
    type: string; // String!
  }
  Purchase: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    items: NexusGenRootTypes['LineItem'][]; // [LineItem!]!
    status: NexusGenEnums['PurchaseStatus']; // PurchaseStatus!
    transaction: NexusGenRootTypes['Transaction']; // Transaction!
    transactionId: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Query: { // field return type
    blobUploadKey: string; // String!
    costItem: NexusGenRootTypes['CostItem']; // CostItem!
    costItemsForEvent: NexusGenRootTypes['CostItem'][]; // [CostItem!]!
    currentTenant: NexusGenRootTypes['Tenant'] | null; // Tenant
    currentUser: NexusGenRootTypes['User'] | null; // User
    event: NexusGenRootTypes['TumiEvent']; // TumiEvent!
    eventRegistrationCode: NexusGenRootTypes['EventRegistrationCode'] | null; // EventRegistrationCode
    eventRegistrationCodes: NexusGenRootTypes['EventRegistrationCode'][]; // [EventRegistrationCode!]!
    eventTemplate: NexusGenRootTypes['EventTemplate'] | null; // EventTemplate
    eventTemplates: NexusGenRootTypes['EventTemplate'][]; // [EventTemplate!]!
    events: NexusGenRootTypes['TumiEvent'][]; // [TumiEvent!]!
    getPaymentSetupSession: NexusGenRootTypes['paymentSetupSession']; // paymentSetupSession!
    invite: NexusGenRootTypes['Invite'] | null; // Invite
    invites: NexusGenRootTypes['Invite'][]; // [Invite!]!
    lmuPurchases: NexusGenRootTypes['Purchase'][]; // [Purchase!]!
    logStats: NexusGenRootTypes['ActivityLogStat'][]; // [ActivityLogStat!]!
    logs: NexusGenRootTypes['ActivityLog'][]; // [ActivityLog!]!
    organizers: NexusGenRootTypes['EventOrganizer'][]; // [EventOrganizer!]!
    photoShareKey: string; // String!
    photos: NexusGenRootTypes['PhotoShare'][]; // [PhotoShare!]!
    photosOfEvent: NexusGenRootTypes['PhotoShare'][]; // [PhotoShare!]!
    product: NexusGenRootTypes['Product']; // Product!
    productImageKey: string; // String!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
    purchase: NexusGenRootTypes['Purchase']; // Purchase!
    purchases: NexusGenRootTypes['Purchase'][]; // [Purchase!]!
    registration: NexusGenRootTypes['EventRegistration']; // EventRegistration!
    registrationCount: number; // Int!
    registrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    templateCategories: NexusGenRootTypes['EventTemplateCategory'][]; // [EventTemplateCategory!]!
    templateCategory: NexusGenRootTypes['EventTemplateCategory'] | null; // EventTemplateCategory
    tenants: NexusGenRootTypes['Tenant'][]; // [Tenant!]!
    userById: NexusGenRootTypes['User'] | null; // User
    userSearchResultNum: number; // Int!
    userWithStatus: NexusGenRootTypes['User'][]; // [User!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Receipt: { // field return type
    amount: NexusGenScalars['Decimal']; // Decimal!
    blob: string; // String!
    container: string; // String!
    costItem: NexusGenRootTypes['CostItem']; // CostItem!
    costItemId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    md5: string | null; // String
    originalUrl: string; // String!
    preview: string | null; // String
    type: string | null; // String
    url: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  ShoppingCart: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    items: NexusGenRootTypes['LineItem'][]; // [LineItem!]!
    userOfTenant: NexusGenRootTypes['UsersOfTenants']; // UsersOfTenants!
    usersOfTenantsTenantId: string; // String!
    usersOfTenantsUserId: string; // String!
  }
  StripePayment: { // field return type
    amount: NexusGenScalars['Decimal']; // Decimal!
    checkoutSession: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    events: Array<NexusGenScalars['Json'] | null>; // [Json]!
    feeAmount: NexusGenScalars['Decimal'] | null; // Decimal
    id: string; // ID!
    netAmount: NexusGenScalars['Decimal'] | null; // Decimal
    netLessRefundAmount: NexusGenScalars['Decimal']; // Decimal!
    paymentIntent: string; // String!
    paymentMethod: string | null; // String
    paymentMethodType: string | null; // String
    refundedAmount: NexusGenScalars['Decimal'] | null; // Decimal
    shipping: NexusGenScalars['Json'] | null; // Json
    status: string; // String!
    transaction: NexusGenRootTypes['Transaction']; // Transaction!
    transactionId: string; // String!
  }
  StripeUserData: { // field return type
    customerId: string; // String!
    id: string; // ID!
    paymentMethodId: string | null; // String
  }
  Tenant: { // field return type
    aboutPage: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    faqPage: string | null; // String
    id: string; // ID!
    imprintPage: string; // String!
    name: string; // String!
    privacyPolicyPage: string; // String!
    shortName: string; // String!
    statistics: NexusGenRootTypes['statistics']; // statistics!
    tacPage: string | null; // String
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  Transaction: { // field return type
    amount: NexusGenScalars['Decimal']; // Decimal!
    comment: string | null; // String
    costItem: NexusGenRootTypes['CostItem'] | null; // CostItem
    costItemId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    eventRegistration: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    id: string; // ID!
    isMembershipFee: boolean; // Boolean!
    partner: string | null; // String
    purchase: NexusGenRootTypes['Purchase'] | null; // Purchase
    stripePayment: NexusGenRootTypes['StripePayment'] | null; // StripePayment
    subject: string; // String!
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    tenantId: string; // String!
    type: NexusGenEnums['TransactionType']; // TransactionType!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  TumiEvent: { // field return type
    activeRegistration: NexusGenRootTypes['EventRegistration'] | null; // EventRegistration
    amountCollected: NexusGenScalars['Decimal']; // Decimal!
    coordinates: NexusGenScalars['Json'] | null; // Json
    costItems: NexusGenRootTypes['CostItem'][]; // [CostItem!]!
    couldBeOrganizer: boolean; // Boolean!
    couldBeParticipant: boolean; // Boolean!
    countedParticipantRegistrations: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: NexusGenRootTypes['User']; // User!
    creatorId: string; // String!
    description: string; // String!
    disableDeregistration: boolean; // Boolean!
    end: NexusGenScalars['DateTime']; // DateTime!
    eventOrganizerId: string; // String!
    eventRegistrationCodes: NexusGenRootTypes['EventRegistrationCode'][]; // [EventRegistrationCode!]!
    eventTemplate: NexusGenRootTypes['EventTemplate']; // EventTemplate!
    eventTemplateId: string; // String!
    feesPaid: NexusGenScalars['Decimal']; // Decimal!
    freeParticipantSpots: string; // String!
    icon: string; // String!
    id: string; // ID!
    insuranceDescription: string; // String!
    location: string; // String!
    needsRating: boolean; // Boolean!
    netAmountCollected: NexusGenScalars['Decimal']; // Decimal!
    organizer: NexusGenRootTypes['EventOrganizer']; // EventOrganizer!
    organizerLimit: number; // Int!
    organizerRatings: number | null; // Float
    organizerRegistrationPossible: boolean; // Boolean!
    organizerRegistrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    organizerSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    organizerText: string; // String!
    organizers: NexusGenRootTypes['User'][]; // [User!]!
    organizersRegistered: number; // Int!
    ownRegistrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    participantLimit: number; // Int!
    participantRatings: number | null; // Float
    participantRegistrationCount: number; // Int!
    participantRegistrationPossible: NexusGenScalars['Json']; // Json!
    participantRegistrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    participantSignup: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    participantText: string; // String!
    participantsAttended: number; // Int!
    participantsRegistered: number; // Int!
    photoShares: NexusGenRootTypes['PhotoShare'][]; // [PhotoShare!]!
    plannedSpend: NexusGenScalars['Decimal'] | null; // Decimal
    prices: NexusGenScalars['Json'] | null; // Json
    publicationState: NexusGenEnums['PublicationState']; // PublicationState!
    refundFeesPaid: NexusGenScalars['Decimal']; // Decimal!
    registrationLink: string | null; // String
    registrationMode: NexusGenEnums['RegistrationMode']; // RegistrationMode!
    registrationStart: NexusGenScalars['DateTime']; // DateTime!
    shouldBeReportedToInsurance: boolean; // Boolean!
    start: NexusGenScalars['DateTime']; // DateTime!
    submissionItems: NexusGenRootTypes['EventSubmissionItem'][]; // [EventSubmissionItem!]!
    submittedSpend: NexusGenScalars['Decimal'] | null; // Decimal
    title: string; // String!
    userIsCreator: boolean; // Boolean!
    userIsOrganizer: boolean; // Boolean!
    userRegistered: boolean; // Boolean!
  }
  User: { // field return type
    authId: string; // String!
    birthdate: NexusGenScalars['DateTime'] | null; // DateTime
    calendarToken: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdTransactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    currentTenant: NexusGenRootTypes['UsersOfTenants']; // UsersOfTenants!
    email: string; // String!
    email_verified: boolean; // Boolean!
    enrolmentStatus: NexusGenEnums['EnrollmentStatus']; // EnrollmentStatus!
    esnCardOverride: boolean; // Boolean!
    eventRegistrations: NexusGenRootTypes['EventRegistration'][]; // [EventRegistration!]!
    firstName: string; // String!
    fullName: string; // String!
    hasESNcard: boolean; // Boolean!
    iban: string | null; // String
    id: string; // ID!
    lastName: string; // String!
    organizedEvents: NexusGenRootTypes['TumiEvent'][]; // [TumiEvent!]!
    outstandingRating: boolean; // Boolean!
    participatedEvents: NexusGenRootTypes['TumiEvent'][]; // [TumiEvent!]!
    paypal: string | null; // String
    phone: string | null; // String
    picture: string; // String!
    profileComplete: boolean; // Boolean!
    purchases: NexusGenRootTypes['Purchase'][]; // [Purchase!]!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    university: string | null; // String
  }
  UsersOfTenants: { // field return type
    cart: NexusGenRootTypes['ShoppingCart'] | null; // ShoppingCart
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    role: NexusGenEnums['Role']; // Role!
    status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
    stripeData: NexusGenRootTypes['StripeUserData'] | null; // StripeUserData
    tenant: NexusGenRootTypes['Tenant']; // Tenant!
    tenantId: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  checkoutSession: { // field return type
    client_secret: string | null; // String
    id: string; // String!
    status: string; // String!
  }
  lineChartSeriesItem: { // field return type
    name: string; // String!
    value: number; // Int!
  }
  paymentIntent: { // field return type
    client_secret: string | null; // String
    id: string; // String!
    status: string; // String!
  }
  paymentSetupSession: { // field return type
    id: string; // String!
  }
  statistics: { // field return type
    checkinHistory: NexusGenScalars['Json'][]; // [Json!]!
    checkins: number; // Int!
    paidEvents: number; // Int!
    paidRegistrations: number; // Int!
    refundHistory: NexusGenScalars['Json'][]; // [Json!]!
    registrationHistory: NexusGenScalars['Json'][]; // [Json!]!
    registrations: number; // Int!
    totalEvents: number; // Int!
    userEventDistribution: NexusGenScalars['Json'][]; // [Json!]!
    userHistory: NexusGenScalars['Json'][]; // [Json!]!
    userStatusDistribution: NexusGenScalars['Json'][]; // [Json!]!
    userUniversityDistribution: NexusGenScalars['Json'][]; // [Json!]!
    usersRegistered: number; // Int!
    usersRegisteredEvents: number; // Int!
    usersRegisteredFreeEvents: number; // Int!
    usersRegisteredPaidEvents: number; // Int!
    usersWithCustomer: number; // Int!
    usersWithPaymentMethod: number; // Int!
  }
  userHistoryItem: { // field return type
    name: string; // String!
    series: NexusGenRootTypes['lineChartSeriesItem'][]; // [lineChartSeriesItem!]!
  }
}

export interface NexusGenFieldTypeNames {
  ActivityLog: { // field return type name
    createdAt: 'DateTime'
    data: 'Json'
    id: 'ID'
    involvedUser: 'String'
    message: 'String'
    oldData: 'Json'
    severity: 'LogSeverity'
  }
  ActivityLogStat: { // field return type name
    count: 'Int'
    message: 'String'
  }
  CostItem: { // field return type name
    actualAmount: 'Decimal'
    amount: 'Decimal'
    calculationInfo: 'String'
    complete: 'Boolean'
    confirmed: 'Boolean'
    createdAt: 'DateTime'
    details: 'String'
    event: 'TumiEvent'
    eventId: 'String'
    id: 'ID'
    name: 'String'
    onInvoice: 'Boolean'
    receipts: 'Receipt'
    submittedAmount: 'Decimal'
    transactions: 'Transaction'
  }
  EventOrganizer: { // field return type name
    createdAt: 'DateTime'
    events: 'TumiEvent'
    id: 'ID'
    link: 'String'
    name: 'String'
    tenant: 'Tenant'
    tenantId: 'String'
    text: 'String'
  }
  EventRegistration: { // field return type name
    belongsToCurrentUser: 'Boolean'
    cancellationReason: 'String'
    checkInTime: 'DateTime'
    createdAt: 'DateTime'
    creatingCode: 'EventRegistrationCode'
    deletingCode: 'EventRegistrationCode'
    didAttend: 'Boolean'
    event: 'TumiEvent'
    eventId: 'String'
    id: 'ID'
    manualCheckin: 'Boolean'
    rating: 'Int'
    status: 'RegistrationStatus'
    submissions: 'EventSubmission'
    transaction: 'Transaction'
    transactionId: 'String'
    type: 'RegistrationType'
    user: 'User'
    userComment: 'String'
    userId: 'String'
  }
  EventRegistrationCode: { // field return type name
    connectedRegistrations: 'EventRegistration'
    createdAt: 'DateTime'
    createdById: 'String'
    creator: 'User'
    eventId: 'String'
    id: 'ID'
    isPublic: 'Boolean'
    registrationCreated: 'EventRegistration'
    registrationCreatedId: 'String'
    registrationToRemove: 'EventRegistration'
    registrationToRemoveId: 'String'
    sepaAllowed: 'Boolean'
    status: 'RegistrationStatus'
    targetEvent: 'TumiEvent'
    transaction: 'Transaction'
    transactionId: 'String'
  }
  EventSubmission: { // field return type name
    createdAt: 'DateTime'
    data: 'Json'
    eventRegistrationId: 'String'
    id: 'ID'
    registration: 'EventRegistration'
    submissionItem: 'EventSubmissionItem'
    submissionItemId: 'String'
  }
  EventSubmissionItem: { // field return type name
    createdAt: 'DateTime'
    data: 'Json'
    event: 'TumiEvent'
    eventId: 'String'
    id: 'ID'
    instruction: 'String'
    name: 'String'
    ownSubmissions: 'EventSubmission'
    required: 'Boolean'
    responses: 'Json'
    submissionTime: 'SubmissionTime'
    submissions: 'EventSubmission'
    type: 'SubmissionItemType'
  }
  EventTemplate: { // field return type name
    comment: 'String'
    coordinates: 'Json'
    createdAt: 'DateTime'
    description: 'String'
    duration: 'Decimal'
    eventInstances: 'TumiEvent'
    finances: 'Json'
    icon: 'String'
    id: 'ID'
    insuranceDescription: 'String'
    location: 'String'
    organizerText: 'String'
    participantText: 'String'
    shouldBeReportedToInsurance: 'Boolean'
    tenant: 'Tenant'
    title: 'String'
  }
  EventTemplateCategory: { // field return type name
    createdAt: 'DateTime'
    icon: 'String'
    id: 'ID'
    name: 'String'
    templates: 'EventTemplate'
  }
  Invite: { // field return type name
    createdAt: 'DateTime'
    creator: 'User'
    creatorId: 'String'
    email: 'String'
    id: 'ID'
    redeemedAt: 'DateTime'
    redeemedBy: 'User'
    redeemerId: 'String'
    status: 'MembershipStatus'
    tenant: 'Tenant'
    tenantId: 'String'
  }
  LineItem: { // field return type name
    cancellationReason: 'String'
    cart: 'ShoppingCart'
    cost: 'Decimal'
    createdAt: 'DateTime'
    id: 'ID'
    pickupTime: 'DateTime'
    product: 'Product'
    productId: 'String'
    purchase: 'Purchase'
    purchaseId: 'String'
    quantity: 'Int'
    shoppingCartId: 'String'
    submissions: 'EventSubmission'
  }
  Mutation: { // field return type name
    addLineItemToBasket: 'LineItem'
    addOrganizerToEvent: 'TumiEvent'
    addReceiptToCostItem: 'CostItem'
    changeEventPublication: 'TumiEvent'
    checkInUser: 'EventRegistration'
    createEventFromTemplate: 'TumiEvent'
    createEventOrganizer: 'EventOrganizer'
    createEventTemplate: 'EventTemplate'
    createInvites: 'Invite'
    createPhotoShare: 'PhotoShare'
    createProduct: 'Product'
    createProductImage: 'ProductImage'
    createPurchaseFromCart: 'Purchase'
    createRegistrationCode: 'EventRegistrationCode'
    createSubmissionItem: 'EventSubmissionItem'
    createSubmissionOnEvent: 'TumiEvent'
    decreaseLineItemQuantity: 'LineItem'
    deleteCostItem: 'TumiEvent'
    deleteEvent: 'TumiEvent'
    deleteLineItem: 'LineItem'
    deleteProductImage: 'ProductImage'
    deleteReceipt: 'CostItem'
    deleteSubmissionItem: 'EventSubmissionItem'
    deleteTemplate: 'EventTemplate'
    deregisterFromEvent: 'TumiEvent'
    increaseLineItemQuantity: 'LineItem'
    rateEvent: 'TumiEvent'
    registerForEvent: 'TumiEvent'
    registerUser: 'User'
    removeSubmissionFromEvent: 'TumiEvent'
    updateAddress: 'Purchase'
    updateCostItemsFromTemplate: 'TumiEvent'
    updateESNcard: 'User'
    updateEventCoreInfo: 'TumiEvent'
    updateEventGeneralInfo: 'TumiEvent'
    updateEventLocation: 'TumiEvent'
    updateEventTemplateConnection: 'TumiEvent'
    updateLeadImage: 'Product'
    updateProduct: 'Product'
    updateProfile: 'User'
    updatePurchaseStatus: 'Purchase'
    updateTemplate: 'EventTemplate'
    updateTemplateFinances: 'EventTemplate'
    updateTemplateLocation: 'EventTemplate'
    updateTenant: 'Tenant'
    updateUserRole: 'User'
    updateUserStatus: 'User'
    useInvite: 'Invite'
    useRegistrationCode: 'EventRegistrationCode'
    verifyDCC: 'Json'
    verifyEmail: 'User'
  }
  PhotoShare: { // field return type name
    cols: 'Int'
    container: 'String'
    createdAt: 'DateTime'
    creator: 'User'
    creatorId: 'String'
    event: 'TumiEvent'
    eventId: 'String'
    id: 'ID'
    original: 'String'
    originalBlob: 'String'
    previewBlob: 'String'
    rows: 'Int'
    src: 'String'
    type: 'String'
  }
  Product: { // field return type name
    availability: 'MembershipStatus'
    createdAt: 'DateTime'
    defaultPrice: 'Decimal'
    description: 'String'
    id: 'ID'
    images: 'ProductImage'
    isActive: 'Boolean'
    isESNcard: 'Boolean'
    leadImage: 'ProductImage'
    leadImageId: 'String'
    lineItems: 'LineItem'
    needsShippingAddress: 'Boolean'
    orderQuantity: 'Int'
    prices: 'Json'
    publicationState: 'PublicationState'
    submissionItems: 'EventSubmissionItem'
    submissionOverview: 'Json'
    tenant: 'Tenant'
    tenantId: 'String'
    title: 'String'
    uniSplit: 'Json'
  }
  ProductImage: { // field return type name
    container: 'String'
    createdAt: 'DateTime'
    creator: 'User'
    creatorId: 'String'
    id: 'ID'
    original: 'String'
    originalBlob: 'String'
    previewBlob: 'String'
    product: 'Product'
    productId: 'String'
    src: 'String'
    type: 'String'
  }
  Purchase: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    items: 'LineItem'
    status: 'PurchaseStatus'
    transaction: 'Transaction'
    transactionId: 'String'
    user: 'User'
    userId: 'String'
  }
  Query: { // field return type name
    blobUploadKey: 'String'
    costItem: 'CostItem'
    costItemsForEvent: 'CostItem'
    currentTenant: 'Tenant'
    currentUser: 'User'
    event: 'TumiEvent'
    eventRegistrationCode: 'EventRegistrationCode'
    eventRegistrationCodes: 'EventRegistrationCode'
    eventTemplate: 'EventTemplate'
    eventTemplates: 'EventTemplate'
    events: 'TumiEvent'
    getPaymentSetupSession: 'paymentSetupSession'
    invite: 'Invite'
    invites: 'Invite'
    lmuPurchases: 'Purchase'
    logStats: 'ActivityLogStat'
    logs: 'ActivityLog'
    organizers: 'EventOrganizer'
    photoShareKey: 'String'
    photos: 'PhotoShare'
    photosOfEvent: 'PhotoShare'
    product: 'Product'
    productImageKey: 'String'
    products: 'Product'
    purchase: 'Purchase'
    purchases: 'Purchase'
    registration: 'EventRegistration'
    registrationCount: 'Int'
    registrations: 'EventRegistration'
    templateCategories: 'EventTemplateCategory'
    templateCategory: 'EventTemplateCategory'
    tenants: 'Tenant'
    userById: 'User'
    userSearchResultNum: 'Int'
    userWithStatus: 'User'
    users: 'User'
  }
  Receipt: { // field return type name
    amount: 'Decimal'
    blob: 'String'
    container: 'String'
    costItem: 'CostItem'
    costItemId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    md5: 'String'
    originalUrl: 'String'
    preview: 'String'
    type: 'String'
    url: 'String'
    user: 'User'
    userId: 'String'
  }
  ShoppingCart: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    items: 'LineItem'
    userOfTenant: 'UsersOfTenants'
    usersOfTenantsTenantId: 'String'
    usersOfTenantsUserId: 'String'
  }
  StripePayment: { // field return type name
    amount: 'Decimal'
    checkoutSession: 'String'
    createdAt: 'DateTime'
    events: 'Json'
    feeAmount: 'Decimal'
    id: 'ID'
    netAmount: 'Decimal'
    netLessRefundAmount: 'Decimal'
    paymentIntent: 'String'
    paymentMethod: 'String'
    paymentMethodType: 'String'
    refundedAmount: 'Decimal'
    shipping: 'Json'
    status: 'String'
    transaction: 'Transaction'
    transactionId: 'String'
  }
  StripeUserData: { // field return type name
    customerId: 'String'
    id: 'ID'
    paymentMethodId: 'String'
  }
  Tenant: { // field return type name
    aboutPage: 'String'
    createdAt: 'DateTime'
    faqPage: 'String'
    id: 'ID'
    imprintPage: 'String'
    name: 'String'
    privacyPolicyPage: 'String'
    shortName: 'String'
    statistics: 'statistics'
    tacPage: 'String'
    transactions: 'Transaction'
  }
  Transaction: { // field return type name
    amount: 'Decimal'
    comment: 'String'
    costItem: 'CostItem'
    costItemId: 'String'
    createdAt: 'DateTime'
    createdBy: 'User'
    creatorId: 'String'
    eventRegistration: 'EventRegistration'
    id: 'ID'
    isMembershipFee: 'Boolean'
    partner: 'String'
    purchase: 'Purchase'
    stripePayment: 'StripePayment'
    subject: 'String'
    tenant: 'Tenant'
    tenantId: 'String'
    type: 'TransactionType'
    user: 'User'
    userId: 'String'
  }
  TumiEvent: { // field return type name
    activeRegistration: 'EventRegistration'
    amountCollected: 'Decimal'
    coordinates: 'Json'
    costItems: 'CostItem'
    couldBeOrganizer: 'Boolean'
    couldBeParticipant: 'Boolean'
    countedParticipantRegistrations: 'Int'
    createdAt: 'DateTime'
    createdBy: 'User'
    creatorId: 'String'
    description: 'String'
    disableDeregistration: 'Boolean'
    end: 'DateTime'
    eventOrganizerId: 'String'
    eventRegistrationCodes: 'EventRegistrationCode'
    eventTemplate: 'EventTemplate'
    eventTemplateId: 'String'
    feesPaid: 'Decimal'
    freeParticipantSpots: 'String'
    icon: 'String'
    id: 'ID'
    insuranceDescription: 'String'
    location: 'String'
    needsRating: 'Boolean'
    netAmountCollected: 'Decimal'
    organizer: 'EventOrganizer'
    organizerLimit: 'Int'
    organizerRatings: 'Float'
    organizerRegistrationPossible: 'Boolean'
    organizerRegistrations: 'EventRegistration'
    organizerSignup: 'MembershipStatus'
    organizerText: 'String'
    organizers: 'User'
    organizersRegistered: 'Int'
    ownRegistrations: 'EventRegistration'
    participantLimit: 'Int'
    participantRatings: 'Float'
    participantRegistrationCount: 'Int'
    participantRegistrationPossible: 'Json'
    participantRegistrations: 'EventRegistration'
    participantSignup: 'MembershipStatus'
    participantText: 'String'
    participantsAttended: 'Int'
    participantsRegistered: 'Int'
    photoShares: 'PhotoShare'
    plannedSpend: 'Decimal'
    prices: 'Json'
    publicationState: 'PublicationState'
    refundFeesPaid: 'Decimal'
    registrationLink: 'String'
    registrationMode: 'RegistrationMode'
    registrationStart: 'DateTime'
    shouldBeReportedToInsurance: 'Boolean'
    start: 'DateTime'
    submissionItems: 'EventSubmissionItem'
    submittedSpend: 'Decimal'
    title: 'String'
    userIsCreator: 'Boolean'
    userIsOrganizer: 'Boolean'
    userRegistered: 'Boolean'
  }
  User: { // field return type name
    authId: 'String'
    birthdate: 'DateTime'
    calendarToken: 'String'
    createdAt: 'DateTime'
    createdTransactions: 'Transaction'
    currentTenant: 'UsersOfTenants'
    email: 'String'
    email_verified: 'Boolean'
    enrolmentStatus: 'EnrollmentStatus'
    esnCardOverride: 'Boolean'
    eventRegistrations: 'EventRegistration'
    firstName: 'String'
    fullName: 'String'
    hasESNcard: 'Boolean'
    iban: 'String'
    id: 'ID'
    lastName: 'String'
    organizedEvents: 'TumiEvent'
    outstandingRating: 'Boolean'
    participatedEvents: 'TumiEvent'
    paypal: 'String'
    phone: 'String'
    picture: 'String'
    profileComplete: 'Boolean'
    purchases: 'Purchase'
    transactions: 'Transaction'
    university: 'String'
  }
  UsersOfTenants: { // field return type name
    cart: 'ShoppingCart'
    createdAt: 'DateTime'
    role: 'Role'
    status: 'MembershipStatus'
    stripeData: 'StripeUserData'
    tenant: 'Tenant'
    tenantId: 'String'
    user: 'User'
    userId: 'String'
  }
  checkoutSession: { // field return type name
    client_secret: 'String'
    id: 'String'
    status: 'String'
  }
  lineChartSeriesItem: { // field return type name
    name: 'String'
    value: 'Int'
  }
  paymentIntent: { // field return type name
    client_secret: 'String'
    id: 'String'
    status: 'String'
  }
  paymentSetupSession: { // field return type name
    id: 'String'
  }
  statistics: { // field return type name
    checkinHistory: 'Json'
    checkins: 'Int'
    paidEvents: 'Int'
    paidRegistrations: 'Int'
    refundHistory: 'Json'
    registrationHistory: 'Json'
    registrations: 'Int'
    totalEvents: 'Int'
    userEventDistribution: 'Json'
    userHistory: 'Json'
    userStatusDistribution: 'Json'
    userUniversityDistribution: 'Json'
    usersRegistered: 'Int'
    usersRegisteredEvents: 'Int'
    usersRegisteredFreeEvents: 'Int'
    usersRegisteredPaidEvents: 'Int'
    usersWithCustomer: 'Int'
    usersWithPaymentMethod: 'Int'
  }
  userHistoryItem: { // field return type name
    name: 'String'
    series: 'lineChartSeriesItem'
  }
}

export interface NexusGenArgTypes {
  EventSubmissionItem: {
    responses: { // args
      onlyWithPurchase?: boolean | null; // Boolean
    }
  }
  Mutation: {
    addLineItemToBasket: { // args
      input: NexusGenInputs['AddLineItemToBasketInput']; // AddLineItemToBasketInput!
    }
    addOrganizerToEvent: { // args
      eventId: string; // ID!
      userId: string; // ID!
    }
    addReceiptToCostItem: { // args
      costItemId: string; // ID!
      receiptInput: NexusGenInputs['CreateReceiptInput']; // CreateReceiptInput!
    }
    changeEventPublication: { // args
      id: string; // ID!
      state: NexusGenEnums['PublicationState']; // PublicationState!
    }
    checkInUser: { // args
      id: string; // ID!
      manualCheckin?: boolean | null; // Boolean
    }
    createEventFromTemplate: { // args
      createEventFromTemplateInput: NexusGenInputs['CreateEventFromTemplateInput']; // CreateEventFromTemplateInput!
      templateId: string; // ID!
    }
    createEventOrganizer: { // args
      newOrganizerInput: NexusGenInputs['NewOrganizerInput']; // NewOrganizerInput!
    }
    createEventTemplate: { // args
      eventTemplateInput: NexusGenInputs['CreateEventTemplateInput']; // CreateEventTemplateInput!
    }
    createInvites: { // args
      emails: string[]; // [String!]!
      status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
    }
    createPhotoShare: { // args
      data: NexusGenInputs['CreatePhotoShareInput']; // CreatePhotoShareInput!
      eventId: string; // ID!
    }
    createProductImage: { // args
      data: NexusGenInputs['CreateProductImageInput']; // CreateProductImageInput!
      productId: string; // ID!
    }
    createRegistrationCode: { // args
      eventId: string; // ID!
      isPublic?: boolean | null; // Boolean
      registrationId?: string | null; // ID
      sepaAllowed?: boolean | null; // Boolean
    }
    createSubmissionItem: { // args
      data: NexusGenInputs['CreateSubmissionItemInput']; // CreateSubmissionItemInput!
      id: string; // ID!
      target: string | null; // String
    }
    createSubmissionOnEvent: { // args
      data: NexusGenInputs['CreateSubmissionItemInput']; // CreateSubmissionItemInput!
      id: string; // ID!
    }
    decreaseLineItemQuantity: { // args
      id: string; // ID!
    }
    deleteCostItem: { // args
      id: string; // ID!
    }
    deleteEvent: { // args
      id: string; // ID!
    }
    deleteLineItem: { // args
      id: string; // ID!
    }
    deleteProductImage: { // args
      id: string; // ID!
    }
    deleteReceipt: { // args
      costItemId: string; // ID!
      receiptId: string; // ID!
    }
    deleteSubmissionItem: { // args
      id: string; // ID!
    }
    deleteTemplate: { // args
      id: string; // ID!
    }
    deregisterFromEvent: { // args
      registrationId: string; // ID!
      withRefund: boolean | null; // Boolean
    }
    increaseLineItemQuantity: { // args
      id: string; // ID!
    }
    rateEvent: { // args
      comment?: string | null; // String
      id: string; // ID!
      rating: number; // Int!
    }
    registerForEvent: { // args
      eventId: string; // ID!
      price?: NexusGenScalars['Json'] | null; // Json
      registrationType: NexusGenEnums['RegistrationType'] | null; // RegistrationType
      submissions?: NexusGenScalars['Json'] | null; // Json
    }
    registerUser: { // args
      userInput: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    removeSubmissionFromEvent: { // args
      id: string; // ID!
    }
    updateAddress: { // args
      address: NexusGenScalars['Json']; // Json!
      id: string; // ID!
    }
    updateCostItemsFromTemplate: { // args
      eventId: string; // ID!
    }
    updateESNcard: { // args
      esnCardOverride: boolean; // Boolean!
      id: string; // ID!
    }
    updateEventCoreInfo: { // args
      data: NexusGenInputs['UpdateCoreEventInput']; // UpdateCoreEventInput!
      id: string; // ID!
    }
    updateEventGeneralInfo: { // args
      data: NexusGenInputs['UpdateGeneralEventInput']; // UpdateGeneralEventInput!
      id: string; // ID!
    }
    updateEventLocation: { // args
      data: NexusGenInputs['UpdateLocationInput']; // UpdateLocationInput!
      id: string; // ID!
    }
    updateEventTemplateConnection: { // args
      id: string; // ID!
      templateId: string; // ID!
    }
    updateLeadImage: { // args
      id: string; // ID!
      leadImageId: string; // ID!
    }
    updateProduct: { // args
      data: NexusGenInputs['UpdateProductInput']; // UpdateProductInput!
      id: string; // ID!
    }
    updateProfile: { // args
      input: NexusGenInputs['UpdateProfileInput']; // UpdateProfileInput!
    }
    updatePurchaseStatus: { // args
      id: string; // ID!
      status: NexusGenEnums['PurchaseStatus']; // PurchaseStatus!
    }
    updateTemplate: { // args
      data: NexusGenInputs['UpdateTemplateInput']; // UpdateTemplateInput!
      id: string; // ID!
    }
    updateTemplateFinances: { // args
      finances: NexusGenScalars['Json']; // Json!
      id: string; // ID!
    }
    updateTemplateLocation: { // args
      data: NexusGenInputs['UpdateLocationInput']; // UpdateLocationInput!
      id: string; // ID!
    }
    updateTenant: { // args
      data: NexusGenInputs['updateTenantInput']; // updateTenantInput!
      id: string; // ID!
    }
    updateUserRole: { // args
      role: NexusGenEnums['Role']; // Role!
      userId: string; // ID!
    }
    updateUserStatus: { // args
      status: NexusGenEnums['MembershipStatus']; // MembershipStatus!
      userId: string; // ID!
    }
    useInvite: { // args
      id: string; // ID!
    }
    useRegistrationCode: { // args
      id: string; // ID!
      price?: NexusGenScalars['Json'] | null; // Json
    }
    verifyDCC: { // args
      certificate: string; // String!
    }
    verifyEmail: { // args
      userId?: string | null; // ID
    }
  }
  Product: {
    lineItems: { // args
      onlyWithPurchase?: boolean | null; // Boolean
    }
  }
  Query: {
    costItem: { // args
      id: string; // ID!
    }
    costItemsForEvent: { // args
      eventId: string; // ID!
    }
    event: { // args
      eventId: string; // ID!
    }
    eventRegistrationCode: { // args
      id: string; // ID!
    }
    eventRegistrationCodes: { // args
      includePassed?: boolean | null; // Boolean
      includePrivate?: boolean | null; // Boolean
      includeUsed?: boolean | null; // Boolean
      orderByEvent?: boolean | null; // Boolean
    }
    eventTemplate: { // args
      id: string; // ID!
    }
    events: { // args
      after?: NexusGenScalars['DateTime'] | null; // DateTime
      before?: NexusGenScalars['DateTime'] | null; // DateTime
      limit?: number | null; // Int
      userId?: string | null; // ID
    }
    invite: { // args
      id: string; // ID!
    }
    photosOfEvent: { // args
      id: string; // ID!
    }
    product: { // args
      id: string; // ID!
    }
    products: { // args
      onlyWithOrders?: boolean | null; // Boolean
    }
    purchase: { // args
      id: string; // ID!
    }
    purchases: { // args
      limitToOwn: boolean | null; // Boolean
    }
    registration: { // args
      id: string; // ID!
    }
    registrationCount: { // args
      statusList: NexusGenEnums['RegistrationStatus'][] | null; // [RegistrationStatus!]
    }
    registrations: { // args
      pageIndex?: number | null; // Int
      pageLength?: number | null; // Int
      statusList: NexusGenEnums['RegistrationStatus'][] | null; // [RegistrationStatus!]
    }
    templateCategory: { // args
      id: string; // ID!
    }
    userById: { // args
      id: string; // ID!
    }
    userSearchResultNum: { // args
      roleList: Array<NexusGenEnums['Role'] | null> | null; // [Role]
      search?: string | null; // String
      statusList: Array<NexusGenEnums['MembershipStatus'] | null> | null; // [MembershipStatus]
    }
    userWithStatus: { // args
      allowList: NexusGenEnums['MembershipStatus'][]; // [MembershipStatus!]!
    }
    users: { // args
      onlyWithPurchase?: boolean | null; // Boolean
      pageIndex?: number | null; // Int
      pageLength?: number | null; // Int
      roleList: Array<NexusGenEnums['Role'] | null> | null; // [Role]
      search?: string | null; // String
      statusList: Array<NexusGenEnums['MembershipStatus'] | null> | null; // [MembershipStatus]
    }
  }
  TumiEvent: {
    costItems: { // args
      hideOnInvoice?: boolean | null; // Boolean
    }
    ownRegistrations: { // args
      includeCancelled?: boolean | null; // Boolean
    }
    participantRegistrations: { // args
      includeCancelled?: boolean | null; // Boolean
    }
    submissionItems: { // args
      submissionTime?: NexusGenEnums['SubmissionTime'] | null; // SubmissionTime
    }
  }
  User: {
    currentTenant: { // args
      userId?: string | null; // ID
    }
    organizedEvents: { // args
      hideCancelled?: boolean | null; // Boolean
    }
    participatedEvents: { // args
      hideCancelled?: boolean | null; // Boolean
    }
    purchases: { // args
      skipCancelled?: boolean | null; // Boolean
    }
  }
  statistics: {
    checkinHistory: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    checkins: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    paidEvents: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    paidRegistrations: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    refundHistory: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    registrationHistory: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    registrations: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    totalEvents: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    userEventDistribution: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    userHistory: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    userStatusDistribution: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    userUniversityDistribution: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersRegistered: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersRegisteredEvents: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersRegisteredFreeEvents: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersRegisteredPaidEvents: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersWithCustomer: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
    usersWithPaymentMethod: { // args
      range?: NexusGenInputs['DateRangeInput'] | null; // DateRangeInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}